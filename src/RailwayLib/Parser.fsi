// Signature file for parser generated by fsyacc
module Parser
open RailwayLib
type token = 
  | EOF
  | EQUALS
  | ARROW
  | DOT
  | COMMA
  | CONNECTIONS
  | SIGNALS
  | TRAINS
  | PORTKIND of (string)
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EQUALS
    | TOKEN_ARROW
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_CONNECTIONS
    | TOKEN_SIGNALS
    | TOKEN_TRAINS
    | TOKEN_PORTKIND
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_connections
    | NONTERM_connection_list
    | NONTERM_connection
    | NONTERM_port
    | NONTERM_signals
    | NONTERM_signal_list
    | NONTERM_signal
    | NONTERM_trains
    | NONTERM_train_list
    | NONTERM_train
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Network) 
