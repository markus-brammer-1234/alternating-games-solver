// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open RailwayLib
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 4 "Parser.fsy"
 
# 9 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | EQUALS
  | ARROW
  | DOT
  | COMMA
  | CONNECTIONS
  | SIGNALS
  | TRAINS
  | PORTKIND of (string)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EQUALS
    | TOKEN_ARROW
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_CONNECTIONS
    | TOKEN_SIGNALS
    | TOKEN_TRAINS
    | TOKEN_PORTKIND
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_connections
    | NONTERM_connection_list
    | NONTERM_connection
    | NONTERM_port
    | NONTERM_signals
    | NONTERM_signal_list
    | NONTERM_signal
    | NONTERM_trains
    | NONTERM_train_list
    | NONTERM_train

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | EQUALS  -> 1 
  | ARROW  -> 2 
  | DOT  -> 3 
  | COMMA  -> 4 
  | CONNECTIONS  -> 5 
  | SIGNALS  -> 6 
  | TRAINS  -> 7 
  | PORTKIND _ -> 8 
  | ID _ -> 9 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_EQUALS 
  | 2 -> TOKEN_ARROW 
  | 3 -> TOKEN_DOT 
  | 4 -> TOKEN_COMMA 
  | 5 -> TOKEN_CONNECTIONS 
  | 6 -> TOKEN_SIGNALS 
  | 7 -> TOKEN_TRAINS 
  | 8 -> TOKEN_PORTKIND 
  | 9 -> TOKEN_ID 
  | 12 -> TOKEN_end_of_input
  | 10 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_connections 
    | 3 -> NONTERM_connection_list 
    | 4 -> NONTERM_connection_list 
    | 5 -> NONTERM_connection 
    | 6 -> NONTERM_port 
    | 7 -> NONTERM_signals 
    | 8 -> NONTERM_signal_list 
    | 9 -> NONTERM_signal_list 
    | 10 -> NONTERM_signal_list 
    | 11 -> NONTERM_signal 
    | 12 -> NONTERM_trains 
    | 13 -> NONTERM_train_list 
    | 14 -> NONTERM_train_list 
    | 15 -> NONTERM_train 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 12 
let _fsyacc_tagOfErrorTerminal = 10

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | EQUALS  -> "EQUALS" 
  | ARROW  -> "ARROW" 
  | DOT  -> "DOT" 
  | COMMA  -> "COMMA" 
  | CONNECTIONS  -> "CONNECTIONS" 
  | SIGNALS  -> "SIGNALS" 
  | TRAINS  -> "TRAINS" 
  | PORTKIND _ -> "PORTKIND" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | CONNECTIONS  -> (null : System.Object) 
  | SIGNALS  -> (null : System.Object) 
  | TRAINS  -> (null : System.Object) 
  | PORTKIND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 7us; 8us; 2us; 65535us; 7us; 9us; 10us; 11us; 3us; 65535us; 7us; 12us; 10us; 12us; 13us; 14us; 1us; 65535us; 2us; 3us; 1us; 65535us; 19us; 20us; 2us; 65535us; 19us; 21us; 22us; 23us; 1us; 65535us; 3us; 4us; 1us; 65535us; 28us; 29us; 2us; 65535us; 28us; 30us; 31us; 32us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 10us; 14us; 16us; 18us; 21us; 23us; 25us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 2us; 4us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 2us; 7us; 10us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 2us; 12us; 14us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 63us; 65us; 67us; 69us; 71us; 73us; |]
let _fsyacc_action_rows = 36
let _fsyacc_actionTableElements = [|1us; 32768us; 5us; 6us; 0us; 49152us; 1us; 32768us; 6us; 18us; 1us; 32768us; 7us; 27us; 1us; 32768us; 0us; 5us; 0us; 16385us; 1us; 32768us; 1us; 7us; 1us; 32768us; 9us; 15us; 1us; 16386us; 4us; 10us; 0us; 16387us; 1us; 32768us; 9us; 15us; 0us; 16388us; 1us; 32768us; 2us; 13us; 1us; 32768us; 9us; 15us; 0us; 16389us; 1us; 32768us; 3us; 16us; 1us; 32768us; 8us; 17us; 0us; 16390us; 1us; 32768us; 1us; 19us; 1us; 16392us; 9us; 24us; 1us; 16391us; 4us; 22us; 0us; 16393us; 1us; 32768us; 9us; 24us; 0us; 16394us; 1us; 32768us; 3us; 25us; 1us; 32768us; 8us; 26us; 0us; 16395us; 1us; 32768us; 1us; 28us; 1us; 32768us; 9us; 33us; 1us; 16396us; 4us; 31us; 0us; 16397us; 1us; 32768us; 9us; 33us; 0us; 16398us; 1us; 32768us; 2us; 34us; 1us; 32768us; 9us; 35us; 0us; 16399us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 7us; 9us; 10us; 12us; 14us; 16us; 17us; 19us; 20us; 22us; 24us; 25us; 27us; 29us; 30us; 32us; 34us; 36us; 37us; 39us; 40us; 42us; 44us; 45us; 47us; 49us; 51us; 52us; 54us; 55us; 57us; 59us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 4us; 3us; 1us; 3us; 3us; 3us; 3us; 0us; 1us; 3us; 3us; 3us; 1us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 5us; 6us; 7us; 7us; 7us; 8us; 9us; 10us; 10us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 16385us; 65535us; 65535us; 65535us; 16387us; 65535us; 16388us; 65535us; 65535us; 16389us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 16397us; 65535us; 16398us; 65535us; 65535us; 16399us; |]
let _fsyacc_reductions ()  =    [| 
# 144 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Network in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 153 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_connections in
            let _2 = parseState.GetInput(2) :?> 'gentype_signals in
            let _3 = parseState.GetInput(3) :?> 'gentype_trains in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "Parser.fsy"
                                                             N (_1, _2, _3) 
                   )
# 18 "Parser.fsy"
                 : Network));
# 166 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_connection_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                                                                       _3 
                   )
# 20 "Parser.fsy"
                 : 'gentype_connections));
# 177 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_connection in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                        Map.empty |> Map.add (fst _1) (snd _1) 
                   )
# 22 "Parser.fsy"
                 : 'gentype_connection_list));
# 188 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_connection_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_connection in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "Parser.fsy"
                                                              _1 |> Map.add (fst _3) (snd _3) 
                   )
# 23 "Parser.fsy"
                 : 'gentype_connection_list));
# 200 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_port in
            let _3 = parseState.GetInput(3) :?> 'gentype_port in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                                   (_1, _3) 
                   )
# 24 "Parser.fsy"
                 : 'gentype_connection));
# 212 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                             ParserFunctions.toPort _1 _3 
                   )
# 25 "Parser.fsy"
                 : 'gentype_port));
# 224 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_signal_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                                           _3 
                   )
# 27 "Parser.fsy"
                 : 'gentype_signals));
# 235 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                             Map.empty 
                   )
# 29 "Parser.fsy"
                 : 'gentype_signal_list));
# 245 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_signal in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                    Map.empty |> Map.add (fst _1) (snd _1) 
                   )
# 30 "Parser.fsy"
                 : 'gentype_signal_list));
# 256 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_signal_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_signal in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                                      _1 |> Map.add (fst _3) (snd _3) 
                   )
# 31 "Parser.fsy"
                 : 'gentype_signal_list));
# 268 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                               ParserFunctions.toSignal _1 _3 
                   )
# 32 "Parser.fsy"
                 : 'gentype_signal));
# 280 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_train_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                        _3 
                   )
# 34 "Parser.fsy"
                 : 'gentype_trains));
# 291 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_train in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                   Map.empty |> Map.add (fst _1) (snd _1) 
                   )
# 36 "Parser.fsy"
                 : 'gentype_train_list));
# 302 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_train_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_train in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                    _1 |> Map.add (fst _3) (snd _3)  
                   )
# 37 "Parser.fsy"
                 : 'gentype_train_list));
# 314 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                          (_1, _3) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_train));
|]
# 327 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 13;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Network =
    engine lexer lexbuf 0 :?> _
